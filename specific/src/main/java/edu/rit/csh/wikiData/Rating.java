/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package edu.rit.csh.wikiData;
@SuppressWarnings("all")
/** Schema generated by Kite */
@org.apache.avro.specific.AvroGenerated
public class Rating extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Rating\",\"namespace\":\"edu.rit.csh.wikiData\",\"doc\":\"Schema generated by Kite\",\"fields\":[{\"name\":\"userId\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '1'\",\"default\":null},{\"name\":\"movieId\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '253'\",\"default\":null},{\"name\":\"rating\",\"type\":[\"null\",\"double\"],\"doc\":\"Type inferred from '3.0'\",\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"Type inferred from '900660748'\",\"default\":null}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
    /** Type inferred from '1' */
    @Deprecated public Long userId;
    /** Type inferred from '253' */
    @Deprecated public Long movieId;
    /** Type inferred from '3.0' */
    @Deprecated public Double rating;
    /** Type inferred from '900660748' */
    @Deprecated public Long timestamp;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Rating() {}

    /**
     * All-args constructor.
     */
    public Rating(Long userId, Long movieId, Double rating, Long timestamp) {
        this.userId = userId;
        this.movieId = movieId;
        this.rating = rating;
        this.timestamp = timestamp;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public Object get(int field$) {
        switch (field$) {
            case 0: return userId;
            case 1: return movieId;
            case 2: return rating;
            case 3: return timestamp;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0: userId = (Long)value$; break;
            case 1: movieId = (Long)value$; break;
            case 2: rating = (Double)value$; break;
            case 3: timestamp = (Long)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'userId' field.
     * Type inferred from '1'
     */
    public Long getUserId() {
        return userId;
    }

    /**
     * Sets the value of the 'userId' field.
     * Type inferred from '1'
     * @param value the value to set.
     */
    public void setUserId(Long value) {
        this.userId = value;
    }

    /**
     * Gets the value of the 'movieId' field.
     * Type inferred from '253'
     */
    public Long getMovieId() {
        return movieId;
    }

    /**
     * Sets the value of the 'movieId' field.
     * Type inferred from '253'
     * @param value the value to set.
     */
    public void setMovieId(Long value) {
        this.movieId = value;
    }

    /**
     * Gets the value of the 'rating' field.
     * Type inferred from '3.0'
     */
    public Double getRating() {
        return rating;
    }

    /**
     * Sets the value of the 'rating' field.
     * Type inferred from '3.0'
     * @param value the value to set.
     */
    public void setRating(Double value) {
        this.rating = value;
    }

    /**
     * Gets the value of the 'timestamp' field.
     * Type inferred from '900660748'
     */
    public Long getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field.
     * Type inferred from '900660748'
     * @param value the value to set.
     */
    public void setTimestamp(Long value) {
        this.timestamp = value;
    }

    /** Creates a new Rating RecordBuilder */
    public static Builder newBuilder() {
        return new Builder();
    }

    /** Creates a new Rating RecordBuilder by copying an existing Builder */
    public static Builder newBuilder(Builder other) {
        return new Builder(other);
    }

    /** Creates a new Rating RecordBuilder by copying an existing Rating instance */
    public static Builder newBuilder(Rating other) {
        return new Builder(other);
    }

    /**
     * RecordBuilder for Rating instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Rating>
            implements org.apache.avro.data.RecordBuilder<Rating> {

        private Long userId;
        private Long movieId;
        private Double rating;
        private Long timestamp;

        /** Creates a new Builder */
        private Builder() {
            super(Rating.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.userId)) {
                this.userId = data().deepCopy(fields()[0].schema(), other.userId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.movieId)) {
                this.movieId = data().deepCopy(fields()[1].schema(), other.movieId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.rating)) {
                this.rating = data().deepCopy(fields()[2].schema(), other.rating);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
                fieldSetFlags()[3] = true;
            }
        }

        /** Creates a Builder by copying an existing Rating instance */
        private Builder(Rating other) {
            super(Rating.SCHEMA$);
            if (isValidValue(fields()[0], other.userId)) {
                this.userId = data().deepCopy(fields()[0].schema(), other.userId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.movieId)) {
                this.movieId = data().deepCopy(fields()[1].schema(), other.movieId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.rating)) {
                this.rating = data().deepCopy(fields()[2].schema(), other.rating);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'userId' field.
         * Type inferred from '1'
         */
        public Long getUserId() {
            return userId;
        }

        /**
         * Sets the value of the 'userId' field.
         * Type inferred from '1'
         * @param value the value to set.
         */
        public Builder setUserId(Long value) {
            validate(fields()[0], value);
            this.userId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'userId' field has been set.
         * Type inferred from '1'
         */
        public boolean hasUserId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'userId' field.
         * Type inferred from '1'
         */
        public Builder clearUserId() {
            userId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'movieId' field.
         * Type inferred from '253'
         */
        public Long getMovieId() {
            return movieId;
        }

        /**
         * Sets the value of the 'movieId' field.
         * Type inferred from '253'
         * @param value the value to set.
         */
        public Builder setMovieId(Long value) {
            validate(fields()[1], value);
            this.movieId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'movieId' field has been set.
         * Type inferred from '253'
         */
        public boolean hasMovieId() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'movieId' field.
         * Type inferred from '253'
         */
        public Builder clearMovieId() {
            movieId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'rating' field.
         * Type inferred from '3.0'
         */
        public Double getRating() {
            return rating;
        }

        /**
         * Sets the value of the 'rating' field.
         * Type inferred from '3.0'
         * @param value the value to set.
         */
        public Builder setRating(Double value) {
            validate(fields()[2], value);
            this.rating = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'rating' field has been set.
         * Type inferred from '3.0'
         */
        public boolean hasRating() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'rating' field.
         * Type inferred from '3.0'
         */
        public Builder clearRating() {
            rating = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'timestamp' field.
         * Type inferred from '900660748'
         */
        public Long getTimestamp() {
            return timestamp;
        }

        /**
         * Sets the value of the 'timestamp' field.
         * Type inferred from '900660748'
         * @param value the value to set.
         */
        public Builder setTimestamp(Long value) {
            validate(fields()[3], value);
            this.timestamp = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'timestamp' field has been set.
         * Type inferred from '900660748'
         */
        public boolean hasTimestamp() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'timestamp' field.
         * Type inferred from '900660748'
         */
        public Builder clearTimestamp() {
            timestamp = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        public Rating build() {
            try {
                Rating record = new Rating();
                record.userId = fieldSetFlags()[0] ? this.userId : (Long) defaultValue(fields()[0]);
                record.movieId = fieldSetFlags()[1] ? this.movieId : (Long) defaultValue(fields()[1]);
                record.rating = fieldSetFlags()[2] ? this.rating : (Double) defaultValue(fields()[2]);
                record.timestamp = fieldSetFlags()[3] ? this.timestamp : (Long) defaultValue(fields()[3]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
